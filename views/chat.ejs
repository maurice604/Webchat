<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>WebChat</title>
  <script src="/socket.io/socket.io.js"></script>
</head>
<body>
  <ul id="messages" >

  </ul>
  <label>Message</label>
  <form action="" id="form-message">
    <input id="messageInput" autocomplete="off" data-testid="message-box"/>
    <button data-testid="send-button">enviar</button>
  </form>

  <label>Nickname</label>
  <form action="" id="form-nickname">
    <input id="nicknameInput" autocomplete="off" data-testid="nickname-box"/>
    <button data-testid="nickname-button" >enviar</button>
  </form>

  <ul id="online-users">
  
  </ul>

  <script>
    const socket = io();

    const formMessage = document.querySelector('#form-message');
    const inputMessage = document.querySelector('#messageInput');

    formMessage.addEventListener('submit', (e) => {
      e.preventDefault();
      const chatMessage = inputMessage.value
      const nickname = sessionStorage.getItem('nickname');
      socket.emit('message', { chatMessage, nickname });
      inputMessage.value = '';
      return false;
    })

    const formNickname = document.querySelector('#form-nickname');
    const inputNickname = document.querySelector('#nicknameInput')


    const createMessage = (message) => {
      const messagesUl = document.querySelector('#messages');
      const li = document.createElement('li');
      li.innerText = message;
      li.setAttribute('data-testid', 'message');
      messagesUl.appendChild(li);
    }

    function getMessagesHistory(allMessages) {
  allMessages.forEach(({ date, nickname, chatMessage }) => {
    const msg = document.getElementById('messages');
    const li = document.createElement('li');
    li.innerText = `${date} - ${nickname} : ${chatMessage}`;
    li.setAttribute('data-testid', 'message');
    msg.appendChild(li);
  });
}

    formNickname.addEventListener('submit', (e) => {
      e.preventDefault();
      const newNickname = inputNickname.value;
      if (newNickname !== '') {
        socket.emit('newName', newNickname);
      }
      sessionStorage.setItem('nickname', newNickname)
      inputNickname.value = '';
      return false;
    })

    const createNicknamesList = (nickname) => {
      const nicknamesUl = document.getElementById('online-users');
      const socketNick = socket.id.slice(0, 16);
      nicknamesUl.innerHTML = '';
      nickname.forEach((user) => {
      console.log('TESTE_NAME', nickname, user)
      const li = document.createElement('li');
      li.setAttribute('data-testid', 'online-user');
      li.innerText = user;
      user === socketNick || user === '' ? nicknamesUl.prepend(li) :
      nicknamesUl.appendChild(li);
      });
    };

    socket.on('messagesHistory', (allMessages) => getMessagesHistory(allMessages));

    socket.on('message', (message) => createMessage(message));

    socket.on('onlineUsersList', createdNickname => {
      createNicknamesList(createdNickname);
    })
  </script>

</body>
</html>
